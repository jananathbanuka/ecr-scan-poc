name: GitHub Actions Demo
# on: [push]
on:
  pull_request:
    types: [opened, reopened, synchronize]

env:
  IMAGE: "ecr-scan-poc"
  IMAGE_ID: "latest"
  PWD: ${{ github.workspace }}
  TEST_IMAGE: httpd
  PR_NUMBER: ${{ github.event.number }}
  THIS_BRANCH: ${{ github.head_ref }}

jobs:
  trivy:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  

      - name: Set Docker Image Env
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity | jq -r '.Account')
          echo "DOCKER_IMAGE_TO_SCAN=${ACCOUNT_ID}.dkr.ecr.eu-central-1.amazonaws.com/${IMAGE}:${IMAGE_ID}" >> $GITHUB_ENV

      - name: Prepare the PR
        # container: docker:dind
        run: |
          wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.18.3_Linux-64bit.deb 2> /dev/null

          trivy image --format template --template '{{- $critical := 0 }}{{- $high := 0 }}{{- range . }}{{- range .Vulnerabilities }}{{- if  eq .Severity "CRITICAL" }}{{- $critical = add $critical 1 }}{{- end }}{{- if  eq .Severity "HIGH" }}{{- $high = add $high 1 }}{{- end }}{{- end }}{{- end }}Critical: {{ $critical }}, High: {{ $high }}' ${{ env.DOCKER_IMAGE_TO_SCAN }} | grep -i "Critical:" > scan_results 

          content=$(cat scan_results)
          
          IFS=, read var1 var2 <<< $content
          IFS=: read critical1 critical2 <<< $var1
          IFS=: read high1 high2 <<< $var2
          
          critical_emoji=":red_circle:"
          if [ "$critical2" -eq 0 ]; then
            critical_emoji=":white_check_mark:"
          fi

          high_emoji=":large_orange_diamond:"
          if [ "$high2" -eq 0 ]; then
            high_emoji=":white_check_mark:"
          fi          

          test_result_emoji=":boom:"
          critical_vulnerabilities_found="false"
          if [ $critical2 -eq 0 ] && [ $high2  -eq 0 ]; then
            test_result_emoji=":eight_spoked_asterisk:"
          else
            critical_vulnerabilities_found="true"
            echo "CRITICAL_VULNERABILITIES_FOUND=${critical_vulnerabilities_found}" >> $GITHUB_ENV
            echo "incorrect"
          fi 

          echo -e "---\n### $test_result_emoji Test Results \n| Severity  | Number of Vulnerabilities|\n| ------------- | ------------- |\n| $critical_emoji $critical1    | $critical2  |\n| $high_emoji $high1        | $high2  |\n" >> pr_body
          
          echo  ":memo: [View the Full Report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> pr_body

          # Reset the variable
          echo 'SUMMARY_OF_THE_SCAN=' >> $GITHUB_ENV
          
          echo 'SUMMARY_OF_THE_SCAN<<EOF' >> $GITHUB_ENV
          cat pr_body >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
      - name: Updare the PR
        uses: tzkhan/pr-update-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          base-branch-regex: '[a-z\d-_.\\/]+'
          # head-branch-regex: '${{ env.THIS_BRANCH }}-\d+'
          # title-template: '[%headbranch%] '
          body-template: |           
            ${{ env.SUMMARY_OF_THE_SCAN }}
          body-update-action: 'suffix'
          body-uppercase-base-match: false

      - name: Developers - View Complete Report
        
        run: |
          trivy image --severity HIGH,CRITICAL ${{ env.DOCKER_IMAGE_TO_SCAN }}
  
        
      # - name: Slack Notification
      #   uses: rtCamp/action-slack-notify@v2
      #   if: ${{ env.CRITICAL_VULNERABILITIES_FOUND }} == 'true'
      #   env:
      #     SLACK_CHANNEL: trivy-scans
      #     SLACK_COLOR: '#FF0000' #${{ job.status }} # or a specific color like 'good' or '#ff00ff'
      #     SLACK_ICON: https://github.com/rtCamp.png?size=48
      #     SLACK_MESSAGE: '> <!here> Please fix the vulnerabilities :rocket:'
      #     SLACK_TITLE: ":bangbang: *CRITICAL Vulnerabilities Found!*"
      #     SLACK_USERNAME: e-bot7
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     MSG_MINIMAL: actions url
      #     SLACK_FOOTER: Trivy | e-bot7
      #     SLACK_LINK_NAMES: true
      #     SLACK_ICON_EMOJI: ":bangbang:"

      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: 'C03K0R0QTU3'
          # This data can be any valid JSON from a previous step in the GitHub Action
          # slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
          payload: |
            {
              "text": "GitHub Action build result:",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Hello, Assistant to the Regional Manager Dwight! *Michael Scott* wants to know where you'd like to take the Paper Company investors to dinner tonight.\n\n *Please select a restaurant:*"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Farmhouse Thai Cuisine*\n:star::star::star::star: 1528 reviews\n They do have some vegan options, like the roti and curry, plus they have a ton of salad stuff and noodles can be ordered without meat!! They have something for everyone here"
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://s3-media3.fl.yelpcdn.com/bphoto/c7ed05m9lC2EmA3Aruue7A/o.jpg",
                    "alt_text": "alt text for image"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Kin Khao*\n:star::star::star::star: 1638 reviews\n The sticky rice also goes wonderfully with the caramelized pork belly, which is absolutely melt-in-your-mouth and so soft."
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://s3-media2.fl.yelpcdn.com/bphoto/korel-1YjNtFtJlMTaC26A/o.jpg",
                    "alt_text": "alt text for image"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Ler Ros*\n:star::star::star::star: 2082 reviews\n I would really recommend the  Yum Koh Moo Yang - Spicy lime dressing and roasted quick marinated pork shoulder, basil leaves, chili & rice powder."
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://s3-media2.fl.yelpcdn.com/bphoto/DawwNigKJ2ckPeDeDM7jAg/o.jpg",
                    "alt_text": "alt text for image"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Farmhouse",
                        "emoji": true
                      },
                      "value": "https://google.lk"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Kin Khao",
                        "emoji": true
                      },
                      "value": "click_me_123",
                      "url": "https://google.com"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Ler Ros",
                        "emoji": true
                      },
                      "value": "click_me_123",
                      "url": "https://google.com"
                    }
                  ]
                }
              ]
            }            
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 







  # VulnerabilityScanner:
  #   runs-on: e-bot7
  #   steps:

  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: get cwd
  #       run: |
  #         pwd
  #         ls
  #         cat README.md        

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
  #         aws-region: eu-central-1


  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1  

  #     - name: Set Docker Image Env
  #       run: |
  #         ACCOUNT_ID=$(aws sts get-caller-identity | jq -r '.Account')
  #         echo "DOCKER_IMAGE_TO_SCAN=${ACCOUNT_ID}.dkr.ecr.eu-central-1.amazonaws.com/${IMAGE}:${IMAGE_ID}" >> $GITHUB_ENV

  #     - name: pull images
  #       run: |
  #         docker pull ${{ env.TEST_IMAGE }}

      # - name: Trivy Scane - Unknown, Low and Medium Vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: '${{ env.TEST_IMAGE }}' #'${{ env.DOCKER_IMAGE_TO_SCAN }}'
      #     severity: 'UNKNOWN,LOW,MEDIUM'
      #     format: 'table'
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # - name: Trivy Scane - High and Critical Vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: '${{ env.TEST_IMAGE }}' #'${{ env.DOCKER_IMAGE_TO_SCAN }}'
      #     severity: 'HIGH,CRITICAL'
      #     format: "sarif"
      #     template: "@/contrib/sarif.tpl"
      #     output: "trivy-scan-results.sarif"
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: "trivy-scan-results.sarif" 
          # category: my-analysis-tool
          # wait-for-processing: "false"
          
      # - name: Remove Local Images
      #   run: |
      #     docker rmi -f 6a7b4d || true #$(docker images -aq) 

      # - name: Daily Vulnerability Scan
      #   uses: lazy-actions/gitrivy@v3
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     image: ${{ env.TEST_IMAGE }}
      #     severity: "CRITICAL"
      #     trivy_version: "0.22.0" # https://github.com/aquasecurity/trivy/discussions/1515
      #     issue_title: "[Critical Vulnerability] - ${{ github.ref_name }} / ${{ github.event.head_commit.message }}"
      #     issue_label: devops
      #     template: "@${{ env.PWD }}/default.tpl" 
          # ignore_unfixed: true
          # vuln_type: os


  # Anchore:
  #   runs-on: e-bot7
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3    
  #     - name: Scan image
  #       uses: anchore/scan-action@v3
  #       id: scan
  #       with:
  #         image: "prom/prometheus:latest"
  #         fail-build: false
  #         acs-report-enable: true

  #     - name: Inspect action SARIF report
  #       run: cat ${{ steps.scan.outputs.sarif }}