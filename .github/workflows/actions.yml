name: GitHub Actions Demo
# on: [push]
on:
  pull_request:
    types: [opened, reopened, synchronize, edited]


env:
  IMAGE: "ecr-scan-poc"
  IMAGE_ID: "3"
  PWD: ${{ github.workspace }}
  TEST_IMAGE: httpd
  PR_NUMBER: ${{ github.event.number }}
  THIS_BRANCH: ${{ github.head_ref }}

jobs:
  trivy:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-central-1


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  

      - name: Set Docker Image Env
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity | jq -r '.Account')
          echo "DOCKER_IMAGE_TO_SCAN=${ACCOUNT_ID}.dkr.ecr.eu-central-1.amazonaws.com/${IMAGE}:${IMAGE_ID}" >> $GITHUB_ENV


      - name: Prepare the PR
        # container: docker:dind
        run: |
          wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.18.3_Linux-64bit.deb 2> /dev/null

          trivy image --format template --template '{{- $critical := 0 }}{{- $high := 0 }}{{- range . }}{{- range .Vulnerabilities }}{{- if  eq .Severity "CRITICAL" }}{{- $critical = add $critical 1 }}{{- end }}{{- if  eq .Severity "HIGH" }}{{- $high = add $high 1 }}{{- end }}{{- end }}{{- end }}Critical: {{ $critical }}, High: {{ $high }}' ${{ env.DOCKER_IMAGE_TO_SCAN }} | grep -i "Critical:" > scan_results 

          content=$(cat scan_results)
          
          IFS=, read var1 var2 <<< $content
          IFS=: read critical1 critical2 <<< $var1
          IFS=: read high1 high2 <<< $var2

          echo -e "\n---\n| Severity  | Number of Vulnerabilities|\n| ------------- | ------------- |\n| $critical1    | $critical2  |\n| $high1        | $high2  |\n" >> pr_body
          

          echo  ":point_right: [View the Full Report](${{ github.server_url }}/${{ github.repository }}/runs/${{ github.job }})" >> pr_body
          
          echo 'SUMMARY_OF_THE_SCAN<<EOF' >> $GITHUB_ENV
          cat pr_body >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
      - name: Updare the PR
        uses: tzkhan/pr-update-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          base-branch-regex: '[a-z\d-_.\\/]+'
          # head-branch-regex: '${{ env.THIS_BRANCH }}-\d+'
          # title-template: '[%headbranch%] '
          body-template: |           
            ${{ env.SUMMARY_OF_THE_SCAN }}
          body-update-action: 'suffix'
          body-uppercase-base-match: false

      - name: Developers - View Complete Report
        
        run: |
          trivy image ${{ env.DOCKER_IMAGE_TO_SCAN }}
  

      







  # VulnerabilityScanner:
  #   runs-on: e-bot7
  #   steps:

  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: get cwd
  #       run: |
  #         pwd
  #         ls
  #         cat README.md        

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
  #         aws-region: eu-central-1


  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1  

  #     - name: Set Docker Image Env
  #       run: |
  #         ACCOUNT_ID=$(aws sts get-caller-identity | jq -r '.Account')
  #         echo "DOCKER_IMAGE_TO_SCAN=${ACCOUNT_ID}.dkr.ecr.eu-central-1.amazonaws.com/${IMAGE}:${IMAGE_ID}" >> $GITHUB_ENV

  #     - name: pull images
  #       run: |
  #         docker pull ${{ env.TEST_IMAGE }}

      # - name: Trivy Scane - Unknown, Low and Medium Vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: '${{ env.TEST_IMAGE }}' #'${{ env.DOCKER_IMAGE_TO_SCAN }}'
      #     severity: 'UNKNOWN,LOW,MEDIUM'
      #     format: 'table'
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # - name: Trivy Scane - High and Critical Vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: '${{ env.TEST_IMAGE }}' #'${{ env.DOCKER_IMAGE_TO_SCAN }}'
      #     severity: 'HIGH,CRITICAL'
      #     format: "sarif"
      #     template: "@/contrib/sarif.tpl"
      #     output: "trivy-scan-results.sarif"
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: "trivy-scan-results.sarif" 
          # category: my-analysis-tool
          # wait-for-processing: "false"
          
      # - name: Remove Local Images
      #   run: |
      #     docker rmi -f 6a7b4d || true #$(docker images -aq) 

      # - name: Daily Vulnerability Scan
      #   uses: lazy-actions/gitrivy@v3
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     image: ${{ env.TEST_IMAGE }}
      #     severity: "CRITICAL"
      #     trivy_version: "0.22.0" # https://github.com/aquasecurity/trivy/discussions/1515
      #     issue_title: "[Critical Vulnerability] - ${{ github.ref_name }} / ${{ github.event.head_commit.message }}"
      #     issue_label: devops
      #     template: "@${{ env.PWD }}/default.tpl" 
          # ignore_unfixed: true
          # vuln_type: os


  # Anchore:
  #   runs-on: e-bot7
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3    
  #     - name: Scan image
  #       uses: anchore/scan-action@v3
  #       id: scan
  #       with:
  #         image: "prom/prometheus:latest"
  #         fail-build: false
  #         acs-report-enable: true

  #     - name: Inspect action SARIF report
  #       run: cat ${{ steps.scan.outputs.sarif }}